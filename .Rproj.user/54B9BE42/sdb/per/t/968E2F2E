{
    "contents" : "# Shiny Server\n\n\n# server.R\nrequire(\"jsonlite\")\nrequire(ggplot2)\nrequire(reshape2)\nrequire(\"RCurl\")\nrequire(dplyr)\nrequire(shiny)\nrequire(shinydashboard)\nrequire(leaflet)\nrequire(DT)\n\n\n## Chris -- ISLAM\nshinyServer(function(input, output) {\n  religion_table <- data.frame(fromJSON(getURL(URLencode(gsub(\"\\n\", \" \", 'skipper.cs.utexas.edu:5001/rest/native/?query=\"\"\"SELECT STATE_NAME, YEAR YR, ISLMGENPCT * 100 islam_total, ISLMSUNPCT * 100 sunni, ISLMSHIPCT * 100 shiite, ISLMOTHRPCT * 100 islam_other, ISLMNATPCT * 100 Nation_Of_Islam, ISLMIBDPCT * 100 Ibadhi, ISLMAHMPCT * 100 Ahmadiyya, ISLMALWPCT * 100 Alawite FROM RELIGIONS_BY_NATION LEFT JOIN COW_STATE_CODES ON COW_STATE_CODES.STATE_NUM = RELIGIONS_BY_NATION.STATE\"\"\"')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_cjs2599', PASS='orcl_cjs2599', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))\n  \n  output$islam_plot <- renderPlot(height = 500, width = 1000, {   \n    country_selection1 <- input$selectCountry1\n    religion_table %>% filter(STATE_NAME == country_selection1) %>% select(YR, ISLAM_OTHER, SUNNI, SHIITE, ALAWITE, AHMADIYYA, IBADHI, NATION_OF_ISLAM) -> religion_table_filtered\n    melt(religion_table_filtered, id.vars = \"YR\", variable.name = \"SECT\", value.name = \"PCT\") -> religion_table_melted\n    islam_plot <- ggplot() +\n      layer(data=religion_table_melted, \n            mapping=aes(x=as.numeric(as.character(YR)),y=PCT, fill=SECT),\n            stat=\"identity\", \n            stat_params=list(),\n            geom=\"area\",\n            geom_params=list()\n      ) + labs(title=country_selection1) +\n      labs(x=\"Year\", y=\"% of Population\") +\n      guides(fill=guide_legend(title=NULL)) +\n      expand_limits(y=c(0,100)) +\n      expand_limits(x=c(1945,2015)) +\n      scale_x_continuous(breaks=c(1945, 1950, 1955, 1960, 1965, 1970, 1975, 1980, 1985, 1990, 1995, 2000, 2005, 2010, 2015))\n    return(islam_plot)\n  })\n  \n  \n  \n  ## Chris -- BUDDHISM\n  buddh_table <- data.frame(fromJSON(getURL(URLencode(gsub(\"\\n\", \" \", 'skipper.cs.utexas.edu:5001/rest/native/?query=\"\"\"SELECT STATE_NAME, YEAR YR, BUDGENPCT * 100 buddhist_total, BUDTHRPCT * 100 theravadan, BUDMAHPCT * 100 mahayan, BUDOTHRPCT * 100 buddhist_other FROM RELIGIONS_BY_NATION LEFT JOIN COW_STATE_CODES ON COW_STATE_CODES.STATE_NUM = RELIGIONS_BY_NATION.STATE\"\"\"')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_cjs2599', PASS='orcl_cjs2599', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))\n  \n  output$buddh_plot <- renderPlot(height = 500, width = 1000, {   \n    country_selection2 <- input$selectCountry2\n    buddh_table %>% filter(STATE_NAME == country_selection2) %>% select(YR, BUDDHIST_OTHER, THERAVADAN, MAHAYAN) -> buddh_table_filtered\n    melt(buddh_table_filtered, id.vars = \"YR\", variable.name = \"SECT\", value.name = \"PCT\") -> buddh_table_melted\n    buddh_plot <- ggplot() +\n      layer(data=buddh_table_melted, \n            mapping=aes(x=as.numeric(as.character(YR)),y=PCT, fill=SECT),\n            stat=\"identity\", \n            stat_params=list(),\n            geom=\"area\",\n            geom_params=list()\n      ) + labs(title=country_selection2) +\n      labs(x=\"Year\", y=\"% of Population\") +\n      guides(fill=guide_legend(title=NULL)) +\n      expand_limits(y=c(0,100)) +\n      expand_limits(x=c(1945,2015)) +\n      scale_x_continuous(breaks=c(1945, 1950, 1955, 1960, 1965, 1970, 1975, 1980, 1985, 1990, 1995, 2000, 2005, 2010, 2015))\n    \n    return(buddh_plot)\n  })\n  \n  ## Quan's 2 Viz\n  dfQ1 <- data.frame(fromJSON(getURL(URLencode(gsub(\"\\n\", \" \", 'skipper.cs.utexas.edu:5001/rest/native/?query=\"\"\"select BUDGEN, YEAR, NAME from RELIGIONS_BY_NATION;\"\"\"')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_cjs2599', PASS='orcl_cjs2599', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE))) \n  \n  output$QPlot1 <- renderPlot(width=600, height=500, {\n    \n    year_selection <- input$animation\n    \n    dfQ1 <- dfQ1 %>% filter (as.character(NAME) %in% c(\"CHN\", \"JPN\", \"DRV\", \"MYA\", \"THI\"), as.character(YEAR) == year_selection )\n    \n    p1 <- ggplot(dfQ1, aes(x=as.character(NAME), y = as.numeric(as.character(BUDGEN)), fill = NAME))  + ylim(0,170000000) +\n      geom_bar(stat = \"identity\") +\n      labs(title='Buddhist Population by Country') + \n      labs(x=\"Year\", y=\"Buddhist Population\")\n    \n    p1\n  })\n  \n  output$QPlot2 <- renderPlot(width=1100, height=500, {\n    \n    dfQ2 <- data.frame(fromJSON(getURL(URLencode(gsub(\"\\n\", \" \", 'skipper.cs.utexas.edu:5001/rest/native/?query=\"\"\"select NONRELIGPCT, YEAR, NAME from RELIGIONS_BY_NATION;\"\"\"')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_cjs2599', PASS='orcl_cjs2599', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE))); \n    \n    dfQ2 <- dfQ2 %>% filter (as.character(NAME) %in% c(\"RUS\", \"CUB\", \"PRK\", \"CHN\", \"JAM\", \"CZE\", \"FIN\", \"USA\"))\n    \n    p2 <- ggplot(dfQ2, aes(x=as.character(YEAR), y = as.numeric(as.character(NONRELIGPCT)), color = NAME)) + facet_grid(. ~ NAME) +\n      geom_point(stat = \"identity\") +\n      labs(title='Non-religious Fraction of Population by Year and Country') + \n      labs(x=\"Year\", y=\"Non-religious Fraction of Population\")\n    \n    p2\n  })\n  \n  \n})",
    "created" : 1449602008016.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "92946968",
    "id" : "968E2F2E",
    "lastKnownWriteTime" : 1449597234,
    "path" : "~/DataVisualization/DV_FinalProject/04 Shiny (ui.R and server.R)/server.R",
    "project_path" : "04 Shiny (ui.R and server.R)/server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}